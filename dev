# Spec
Raspberry Pi 4 Model B, 4GB RAM, BCM2711(4Core&Thread)
SanDisk Extreme | microSDXC UHS-I Card, 64GB
Raspberry Pi OS Lite (64-bit), 438MB, Kernel version: 6.6, Debian version: 12 (bookworm)
+ RTC 추가해야함

# 현장
네트워크 없음, 인터넷 불가능
크레인 탑에 설치하는 특성상 접근 어려움
설치시 수개월 또는 수년간 접근 안할수도 있음

# 전원 중단 대응 (베터리를 쓸 수 없는 환경)
## 오버레이 파일 시스템
- DB 파티션, 마운트, 저널링(ext4)
- DB 데이터, 시스템로그, 서버로그 등을 디스크에 쓰는 하나 이상의 배치프로세싱 구성 (캐싱없이 즉시 쓰기)
  - log2ram 알아보기


# 365 24
## 리부트
- 비 정기적 리부트
  - 시스템 모니터링 & 리부트
  - Watchdog Timer
- 정기적 리부트
  - AR20, download 등 확인해서 지연할 수 있어야함
  - 근무시간에는 절대 리부트를 예약하지 않아야함

## 앱 리로드
- PM2 자동실행 & 리로드

## 디스크
로그 로테이트 - DB, 앱, 시스템로그

## 발열?
쿨링 팬/제어?

# Network(Wifi, SSH)
## development
Wifi 자동 연결
Wifi 통한 SSH 접속

## production
Wifi, 블루투스 등 불필요한 장치 끄기
(복구전략) USB Cable 이용한 SSH 접속


# GPIO
## Lib
아래 두 라이브러리를 사용해서 GPIO 제어.
### pigpio
alert 은 수 마이크로초 단위로 뱐화를 감지하지만 이벤트 핸들러가 실행되는 타이밍의 오차는 1ms 까지 올라간다.
interrupt 받는게 합리적이나, 문제가 있어보임.
pigpio C 라이브러리는 /dev/gpiomem 같은 장치 파일에 접근하여 GPIO를 제어하는데,
이 장치 파일은 한 번에 한 프로세스만 안전하게 접근할 수 있도록 되어 있어 멀티프로세싱 까다로움.
정확도가 중요한 부분, 시리얼을 읽는 프로세스에서만 사용.

### onoff
edge 는 수십 마이크로초 의 오차를 가지고 이벤트 핸들러를 실행할 수 있다.
제너럴하게 사용.

## Serial Data
GPIO 2개(SYNC_CLK, SERIAL_DATA)이용
SYNC_CLK 의 상승엣지(1200~1350bps) 에서 SERIAL_DATA 읽기
### 정확도, 안정성
- onoff < node-libgpiod < pigpio
- 이벤트 루프 분리, 프로세스 분리
  - [] 차일드프로세스 헬스체킹/재시작 등 안정성, 회복성
- 최소화 하고 scheduling policy, priority 조정
- stdio(Uint8Array) 로 데이터 전달
- 보정
  - [] 1~2|3 개 클락 밀리는것 보정해서 검증하고 푸시하기
  - [] 사이클 배수 단위로 지연되어 싱크워드 찾는경우, 나눠서 검증하고 푸시하기
  - [] 사이클 배수에 근사한 단위로 지연되는 경우 보정하고 검증, 푸시하기

## Receiver Status (AR20) 신호 문제
디바운싱, 타이머 로 해결


# database
- Log-Structured File System
- append-only
- segment
- binary

# USB
## mount, umount 를 안전하게 제어
- Udev 이벤트를 서버에서 다룸
- USB 연결 제한

# 엑셀로 출력
각 로그를 1초 단위로 압축/평균
하루치를 하나의 파일로, 3만여개의 열 예상.
스트리밍쓰기

# LED

# 패키징

# 출고 Test 구축









May ------------------------------------------

# DB 안정성 + 복구전략
- 쓰기 복구 및 복원 전략
- 읽기 검사 전략
- 프로세스 나누고 소켓으로 통신

# 로거에서 가능한 검증 3 가지 / 16 bits error limit / Address Parity Reverse

# 전원부 회로