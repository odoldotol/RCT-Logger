# Spec
Raspberry Pi 4 Model B, 4GB RAM, BCM2711(4Core&Thread)
SanDisk Extreme | microSDXC UHS-I Card, 64GB
Raspberry Pi OS Lite (64-bit), 438MB, Kernel version: 6.6, Debian version: 12 (bookworm)
RTC - DS3231
[] RTC 백업 베터리 방전된후 전원 끈겨서 초기화시 전략?

# 현장
네트워크 없음, 인터넷 불가능
크레인 탑에 설치하는 특성상 접근 어려움
설치시 수개월 또는 수년간 접근 안할수도 있음
설치전 수개월 또는 수년간 창고에 방치될 수도 있음 => RTC 백업 베터리 방전 문제
[] 외부 노이즈 테스트 => 싱크워드 찾기 오차허용, 보정, 검증, summarizing

# 전원 중단 대응 (베터리를 쓸 수 없는 환경)
## [] 오버레이 파일 시스템
- DB 파티션, 마운트, 저널링(ext4)
- DB 데이터, 시스템로그, 서버로그 등을 디스크에 쓰는 하나 이상의 배치프로세싱 구성 (캐싱없이 즉시 쓰기)
  - log2ram?


# 365 24
## 앱
PM2 (5.4.3)
시작, 리로드, 모니터

[] pigpio 사용하는 프로세스는 완벽히 죽인다음 재시작 해야함

## 시스템
리부트 없이는 죽지않는 시스템
[] 안전한 리부트(백업)

### 모니터링 리부트
- 시스템 모니터링 & 리부트
- Watchdog Timer

[] 앱 - heartbeat

[] 메모리 - 누수, 과도한 사용
App - 80-90M(평시), 140M(다운로드)
시스템 - WIFI, BT 등 불필요한 백그라운드 비활성화 하고 오버레이FS 적용 후에 체크해볼것

[] CPU - 과도한 부하, 특정 프로세스의 무한 루프
cat /proc/loadavg
평시 - 0.37 0.37 0.36 1/191 2488
다운로드 시작 피크 - 2.20 1.11 0.65 4/205 2588
다운로드 중간 값 - 1.52 1.26 0.79 3/206 2635
다운로드 마무리 피크 - 2.01 1.50 0.97 2/206 2668

기능 전부 구현하고 디자인 집어넣으니 (로깅없이)
1.28 0.68 0.34 2/206 2569
1.06 0.97 0.57 3/207 2656
1.36 1.10 0.68 3/206 2662
1.19 1.16 0.93 3/205 2676
cpu 다 쓰면 3~4배는 빨라지겠구만

(로깅 있시)
1.70 0.95 0.59 4/209 3864
0.?? ?.?? 1.2?

[] 디스크 - 에러, I/O 지연, 파일 시스템 이상

[] 로그 및 커널 메시지 - dmesg, syslog, journalctl 등에서 치명적인 오류나 커널 패닉 메시지

[] 온도 - CPU 온도
평시 - 40도
다운로드 피크 - 65도

[] 전원 - 전압 불안정, 전원 공급 이상 여부

### 정기적 리부트
- AR20, download 등 확인해서 지연할 수 있어야함
- 근무시간에는 절대 리부트를 예약하지 않아야함

### 디스크 관리
[] 로그 로테이트 (64GB 면 50년은 써야 꽉찰것같은데, 필요해...?)
  - DB
  - 앱로그
  - 시스템로그

### 발열
80도부터 성능제한, 셧다운 가능성 있다고함.
현, 동절기이긴 하나, 방열케이스 장착후 40도 선에서 관리됨.
일단, 로거에서 주기적 온도 체크. => 별도 모니터링 프로세스에 통합
- 다운로드할떄 온도상승 보임.
  - 3일치정도할때 3분정도동안 10도정도 상승함.
  - 10몇일치 할떄 65도 이상도 관측함.

다운로드 열관리만 잘 하면 쿨링 팬 필요없음


# Network(Wifi, SSH)
## development
Wifi 자동 연결
Wifi 통한 SSH 접속

## production
[] Wifi, 블루투스 등 불필요한 장치 끄기
[] (복구전략) Ethernet 이용한 SSH 접속


# GPIO
## Lib
아래 두 라이브러리를 사용해서 GPIO 제어.
### pigpio
alert 은 수 마이크로초 단위로 뱐화를 감지하지만 이벤트 핸들러가 실행되는 타이밍의 오차는 1ms 까지 올라간다.
interrupt 받는게 합리적이나, 문제가 있어보임.
pigpio C 라이브러리는 /dev/gpiomem 같은 장치 파일에 접근하여 GPIO를 제어하는데,
이 장치 파일은 한 번에 한 프로세스만 안전하게 접근할 수 있도록 되어 있어 멀티프로세싱 까다로움.
정확도가 중요한 부분, 시리얼을 읽는 프로세스에서만 사용.

### onoff
edge 는 수십 마이크로초 의 오차를 가지고 이벤트 핸들러를 실행할 수 있다.
제너럴하게 사용.

## Serial Data
OKI MSM6882-5, RT/RD
1200bps

GPIO
RT - SYNC_CLK
RD - SERIAL_DATA

SYNC_CLK 의 상승엣지(데이터 중위)에서 SERIAL_DATA 읽기

### 정확도, 안정성
- onoff < node-libgpiod < pigpio
- 이벤트 루프 분리, 프로세스 분리
  - [] 차일드프로세스 헬스체킹/재시작 등 안정성, 회복성 => pm2 로 관리? 소켓?
- 최소화 하고 scheduling policy, priority 조정
- stdio(Uint8Array) 로 데이터 전달
- [] timestamp 정확도 (현재, 오차범위: +메인 프로세스의 이벤트루프 레이턴시)
- 보정
  - [] 1~2|3 개 클락 밀리는것 보정해서 검증하고 푸시하기
  - [] 사이클 배수 단위로 지연되어 싱크워드 찾는경우, 나눠서 검증하고 푸시하기
  - [] 사이클 배수에 근사한 단위로 지연되는 경우 보정하고 검증, 푸시하기

## Receiver Status (AR20) 신호 문제
디바운싱, 타이머 로 해결


# database
- Log-Structured File System
- append-only
- segment
- binary
[] 쓰기/읽기 안정성, 복구전략


# USB
## mount, umount 를 안전하게 제어
- Udev 이벤트를 서버에서 다룸
- USB 연결 제한

# 로그를 엑셀로 USB Storage 에 다운로드
세그먼트 스트림읽기 -> 엑셀 스트림쓰기
각 로그를 1초 단위로 요약
하루치를 하나의 파일로, 3만여개의 열 예상.
데이터수신(stdio), led(timer) 등 이벤트루프 병목 없어야함.
[] CPU 온도 X도시 이상이면 시작하지 않기 & 한번에 N일치만 허용하기 => 안정성 확보
[] rangeQuery 읽기 및 다운로드로그/에러 출력 인/디코딩 전략
[] 다운로드 성능(속도) 개선

# LED
간단 상태표시, USB 및 다운로드 상호작용

# [] GPIO, RTC 등 모든 연결 없이도 전원만으로 부팅, 앱실행 문제없어야함

# [] 패키징

# 출고 Test 구축









May ------------------------------------------

# DB 안정성 + 복구전략
- 쓰기 복구 및 복원 전략
- 읽기 검사 전략
- 프로세스 나누고 소켓으로 통신

# 로거에서 가능한 검증 3 가지 / 16 bits error limit / Address Parity Reverse

# 전원부 회로