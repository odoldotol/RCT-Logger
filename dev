# Spec
Raspberry Pi 4 Model B, 4GB RAM, BCM2711(4Core&Thread)
SanDisk Extreme | microSDXC UHS-I Card, 64GB
Raspberry Pi OS Lite (64-bit), 438MB, Kernel version: 6.6, Debian version: 12 (bookworm)
+ RTC 추가해야함

# 현장, 전원 중단 대응 (베터리를 쓸 수 없는 환경)
- 오버레이 파일 시스템으로 microSD 보호
- DB 를 위한 공간은 파티션 나누고 마운트하여 디스크에 쓰기 가능하도록 함
- DB 는 배치프로세싱으로 일정시간마다 데이터를 쓰고, 캐싱없이 즉시 디스크에 씀(fs.fsync)
- 저널링(ext4)으로 DB의 안정성 추가 확보

- (추가)시스템 로그, 서버 로그 등을 일정시간마다 디스크에 쓰기. DB 배치와 겹치지 않도록 시간간격은 각각 소수를 이용
- (추가)필요하면 외장 저전력 SSD 사용 고려
- (추가)전원부 회로 보강 필요시 고려

# 365 24
- Watchdog Timer
- PM2 자동실행&리로드
- 쿨링 팬/제어
- 정기 재부팅 (주 1회)
- 로그 로테이트

# Network(Wifi, SSH)
development only
Wifi 자동 연결
Wifi 통한 SSH 접속
USB Cable 이용한 SSH 접속
(추가)Wifi, 블루투스 등 불필요한 장치 끄기

# GPIO
## pigpio
최종 선택

# Receiver Status 신호 문제
- 디바운싱
- 타이머

# Serial Data
GPIO 2개(IO_SClK, IO_DATA)이용
평균 0.74ms 정도마다 1 bit 전송. (1200bps 이랬는데 실제로 찍어보니 1350bps)

IO_SClK 의 상승엣지 이벤트마다 IO_DATA 읽어서 1 bit 씩 수신.
1350bps 정도는 nodejs 로도 동기통신을 구현하기에 충분하다고 판단.
- onoff < node-libgpiod < pigpio
- child_process, SharedBuffer, ...
- taskset, numactl, cgroups...
- setPriority, chrt, nice, ...

- 속도 테스트 도구 마련할것
수신기 클락이 데이터의 정중앙 타이밍이니 한 클락의 절반만큼 오차는 단 한번이라도 절대 안됨.

# Find SyncWord
각 SyncWord 사이의 Word 들을 전달. 4~6 Words.
- 무선통신 노이즈 생각보다 심각... 미팅 필요!

# Validation
16 bits error limit

## Address

## Parity

## Reverse

# 로깅
1초마다 각 데이터들을 평균내서 로깅.

# database
Log-Structured File System

# 다운로드
USB
스트림

# USB
마운트(자동/수동), 권한, udev, 안전한 언마운트, 불안전한(강제) 언마운트

# 상태체크 LED
라즈베리파이 부팅됨
서버 실행중
데이터 수신중
로깅중
USB연결
다운로드완료