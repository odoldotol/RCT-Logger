# serial 수신부
싱크클락 - 데이터포트

## SyncWord 찾기

## 데이터 정확도 높이기
노이즈도 있지만 매 클락마다 정확성과 사이클마다의 정확성이 핵심.

- stdio 는 확실히 8비트 버퍼가 빠름
- console.log 는 동기, 수백마이크로초가 소모될 수 있음.
- cpu 에 어떤 사이클이 있는것같음. 살짝 느려졌다가 빨라졌다가. 아직까진 무시할 수 있는 수준.

[V] 프로세스를 나누기
[V] 프로세스의 스케쥴링 정책 및 우선순위 수정

프로새스가 실행되고 수초~수십초가 지나면 안정되어 1200~1350bps 를 onoff 로 읽는데 문제없음.
5 초에 한두 클락이 밀리거나 유실되는 수준이고 이는 보정 가능할듯.

[] 보정 => 간혹 한두 클락이 밀리는 것을 보정해서 사이클의 다른 워드나 다른 부분의 데이터는 신뢰할 수 있음.
  [] 1~3 개 짧은거 보정해주고 검증시작
  [] 사이클 길이의 배수에 근사하는 클락이후에 싱크워드를 찾는경우, 나눠서 처리하고 시간도 유추

[] 클락을 언제 어디서 잃어버리는지 정확히 찾기
[] 공유메모리 (프로세스간 통신이 문제라면 고민해보자)
[] cpu 를 분리/고정 => cgroups 으로 모든 프로세스들을 정리하지 않으면 오히려 부정적 효과날 수도 있을듯?


# status
수신기에 받는 신호
High = 송신기가 켜져있음을 의미
Low = 송신기가 꺼져있음을 의미

실험적으로 알게된 3 가지 상황
- 모든것이 정상 = High
- 송신기가 켜지는 순간 = 수백 밀리세컨 마다 수 마이크로초 단위로 High-Low 반복하다가 수초 정도 후에 High 안정.
- 송신기가 켜져있지만 기기넘버 검증 실패하거나 데이터 오류인경우 = 1초 사이클로 High Low 반복함. High 600ms, Low 400ms 정도

디바운싱으로 잡을수 있는건 잡고
안되는건 1초 사이클로 High Low 반복하는것을 잡아서 Low 로 여겨야함.



# Todo
[] 차일드 프로세스 헬스체킹/복구/재시작 등 안정성.